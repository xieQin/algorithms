// 二叉树的深度
// 输入一颗二叉树的根结点，求该树的深度
// 从根结点到叶节点（含根、叶节点）形成一条路径，最长路径的长度为该树的深度

// 递归左右子树，返回较大的值
const findTreeDepth = binaryTree => {

}

// 平衡二叉树
// 输入一颗二叉树的根结点，判断该树是不是平衡二叉树AVL
// 如果二叉树任意节点的左右子树深度相差不超过1，那么它就是一颗二叉平衡树

// 后序遍历方式遍历树的每个节点，记录每个节点的深度，一遍遍历一遍判断每个节点是否是平衡的
const isAVLTree = treeNode => {

}